buildscript {
    repositories {
        mavenCentral()
    }
}
plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id 'io.codearte.nexus-staging' version '0.11.0'
}
repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'

group 'com.wedeploy'

def release = System.getenv("WEDEPLOY_RELEASE") ? true : false
if (release)
    version '1.2.1'
else
    version 'local'

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

targetCompatibility = 1.7
sourceCompatibility = 1.7

dependencies {
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.6.0'
    compile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.0.7'
    compile ('io.socket:socket.io-client:0.8.3') {
        exclude group: 'org.json', module: 'json'
    }

    compileOnly group: 'com.google.android', name: 'android', version: '4.1.1.4'
    compileOnly group: 'org.json', name: 'json', version: '20160810'

    testCompile group: 'com.google.android', name: 'android', version: '4.1.1.4'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.json', name: 'json', version: '20160810'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.19'
    testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.2.3'
}

test {
    testLogging.showStandardStreams = true
}
// maven

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}
if (project.hasProperty("wedeployRepo")) {
    model {
        tasks.publishJarPublicationToMavenRepository {
            enabled = !release
        }
    }
}
model {
    tasks.publishJarPublicationToSonatypeRepository {
        if (release)
            dependsOn(project.tasks.signArchives)
        enabled = release
    }
}
artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}
if (release) {
    signing {
        sign configurations.archives
    }
}

publishing {
    publications {
        jar(MavenPublication) {
            customizePom(pom, rootProject)
            from components.java

            artifact sourceJar
            artifact javadocJar

            if (release) {
                // sign the pom
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                    pomFile.delete()
                }

                // sign the artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }
    repositories {
        if (project.hasProperty("wedeployRepo")) {
            maven {
                if (release) {
                    url wedeployRepo
                    credentials {
                        username wedeployRepoUsername
                        password wedeployRepoPassword
                    }
                }
            }
        }
        maven {
            name 'sonatype'
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            if (release) {
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }
}

def customizePom(pom, gradleProject) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            name 'WeDeploy Android API Client'
            description 'Android API Client for WeDeploy'
            url 'https://github.com/wedeploy/api-android'
            organization {
                name 'WeDeploy'
                url 'http://wedeploy.com'
            }
            licenses {
                license {
                    name 'The New BSD License'
                }
            }
            scm {
                url 'https://github.com/wedeploy/api-android'
            }
            developers {
                developer {
                    id 'silvio'
                    name 'Silvio Santos'
                }
                developer {
                    id 'victor'
                    name 'Victor Oliveira'
                    email 'victor.oliveira@liferay.com'
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    configurations = ['archives']

    dryRun = false
    publish = true

    pkg {
        repo = 'wedeploy'
        name = 'api-android'
        userOrg = 'liferay'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/wedeploy/api-android.git'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}
